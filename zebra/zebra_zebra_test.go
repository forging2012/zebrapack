// Code generated by ZEBRAPACK (github.com/glycerine/zebrapack). DO NOT EDIT.

package zebra

import (
	"bytes"
	"testing"

	"github.com/glycerine/zebrapack/msgp"
)

func TestMarshalUnmarshalFieldZebra(t *testing.T) {
	v := Field{}
	bts, err := v.ZebraMarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.ZebraUnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after ZebraUnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}

func BenchmarkMarshalMsgFieldZebra(b *testing.B) {
	v := Field{}
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.ZebraMarshalMsg(nil)
	}
}

func BenchmarkAppendMsgFieldZebra(b *testing.B) {
	v := Field{}
	bts := make([]byte, 0, v.ZebraMsgsize())
	bts, _ = v.ZebraMarshalMsg(bts[0:0])
	b.SetBytes(int64(len(bts)))
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bts, _ = v.ZebraMarshalMsg(bts[0:0])
	}
}

func BenchmarkUnmarshalFieldZebra(b *testing.B) {
	v := Field{}
	bts, _ := v.ZebraMarshalMsg(nil)
	b.ReportAllocs()
	b.SetBytes(int64(len(bts)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := v.ZebraUnmarshalMsg(bts)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestEncodeDecodeFieldZebra(t *testing.T) {
	v := Field{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)

	m := v.ZebraMsgsize()
	if buf.Len() > m {
		t.Logf("WARNING: ZebraMsgsize() for %v is inaccurate", v)
	}

	vn := Field{}
	err := msgp.Decode(&buf, &vn)
	if err != nil {
		t.Error(err)
	}

	buf.Reset()
	msgp.Encode(&buf, &v)
	err = msgp.NewReader(&buf).Skip()
	if err != nil {
		t.Error(err)
	}
}

func BenchmarkEncodeFieldZebra(b *testing.B) {
	v := Field{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	en := msgp.NewWriter(msgp.Nowhere)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.ZebraEncodeMsg(en)
	}
	en.Flush()
}

func BenchmarkDecodeFieldZebra(b *testing.B) {
	v := Field{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	rd := msgp.NewEndlessReader(buf.Bytes(), b)
	dc := msgp.NewReader(rd)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		err := v.ZebraDecodeMsg(dc)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestMarshalUnmarshalSchemaZebra(t *testing.T) {
	v := Schema{}
	bts, err := v.ZebraMarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.ZebraUnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after ZebraUnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}

func BenchmarkMarshalMsgSchemaZebra(b *testing.B) {
	v := Schema{}
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.ZebraMarshalMsg(nil)
	}
}

func BenchmarkAppendMsgSchemaZebra(b *testing.B) {
	v := Schema{}
	bts := make([]byte, 0, v.ZebraMsgsize())
	bts, _ = v.ZebraMarshalMsg(bts[0:0])
	b.SetBytes(int64(len(bts)))
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bts, _ = v.ZebraMarshalMsg(bts[0:0])
	}
}

func BenchmarkUnmarshalSchemaZebra(b *testing.B) {
	v := Schema{}
	bts, _ := v.ZebraMarshalMsg(nil)
	b.ReportAllocs()
	b.SetBytes(int64(len(bts)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := v.ZebraUnmarshalMsg(bts)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestEncodeDecodeSchemaZebra(t *testing.T) {
	v := Schema{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)

	m := v.ZebraMsgsize()
	if buf.Len() > m {
		t.Logf("WARNING: ZebraMsgsize() for %v is inaccurate", v)
	}

	vn := Schema{}
	err := msgp.Decode(&buf, &vn)
	if err != nil {
		t.Error(err)
	}

	buf.Reset()
	msgp.Encode(&buf, &v)
	err = msgp.NewReader(&buf).Skip()
	if err != nil {
		t.Error(err)
	}
}

func BenchmarkEncodeSchemaZebra(b *testing.B) {
	v := Schema{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	en := msgp.NewWriter(msgp.Nowhere)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.ZebraEncodeMsg(en)
	}
	en.Flush()
}

func BenchmarkDecodeSchemaZebra(b *testing.B) {
	v := Schema{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	rd := msgp.NewEndlessReader(buf.Bytes(), b)
	dc := msgp.NewReader(rd)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		err := v.ZebraDecodeMsg(dc)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestMarshalUnmarshalStructZebra(t *testing.T) {
	v := Struct{}
	bts, err := v.ZebraMarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.ZebraUnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after ZebraUnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}

func BenchmarkMarshalMsgStructZebra(b *testing.B) {
	v := Struct{}
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.ZebraMarshalMsg(nil)
	}
}

func BenchmarkAppendMsgStructZebra(b *testing.B) {
	v := Struct{}
	bts := make([]byte, 0, v.ZebraMsgsize())
	bts, _ = v.ZebraMarshalMsg(bts[0:0])
	b.SetBytes(int64(len(bts)))
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bts, _ = v.ZebraMarshalMsg(bts[0:0])
	}
}

func BenchmarkUnmarshalStructZebra(b *testing.B) {
	v := Struct{}
	bts, _ := v.ZebraMarshalMsg(nil)
	b.ReportAllocs()
	b.SetBytes(int64(len(bts)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := v.ZebraUnmarshalMsg(bts)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestEncodeDecodeStructZebra(t *testing.T) {
	v := Struct{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)

	m := v.ZebraMsgsize()
	if buf.Len() > m {
		t.Logf("WARNING: ZebraMsgsize() for %v is inaccurate", v)
	}

	vn := Struct{}
	err := msgp.Decode(&buf, &vn)
	if err != nil {
		t.Error(err)
	}

	buf.Reset()
	msgp.Encode(&buf, &v)
	err = msgp.NewReader(&buf).Skip()
	if err != nil {
		t.Error(err)
	}
}

func BenchmarkEncodeStructZebra(b *testing.B) {
	v := Struct{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	en := msgp.NewWriter(msgp.Nowhere)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.ZebraEncodeMsg(en)
	}
	en.Flush()
}

func BenchmarkDecodeStructZebra(b *testing.B) {
	v := Struct{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	rd := msgp.NewEndlessReader(buf.Bytes(), b)
	dc := msgp.NewReader(rd)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		err := v.ZebraDecodeMsg(dc)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestMarshalUnmarshalZtypeZebra(t *testing.T) {
	v := Ztype{}
	bts, err := v.ZebraMarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.ZebraUnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after ZebraUnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}

func BenchmarkMarshalMsgZtypeZebra(b *testing.B) {
	v := Ztype{}
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.ZebraMarshalMsg(nil)
	}
}

func BenchmarkAppendMsgZtypeZebra(b *testing.B) {
	v := Ztype{}
	bts := make([]byte, 0, v.ZebraMsgsize())
	bts, _ = v.ZebraMarshalMsg(bts[0:0])
	b.SetBytes(int64(len(bts)))
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bts, _ = v.ZebraMarshalMsg(bts[0:0])
	}
}

func BenchmarkUnmarshalZtypeZebra(b *testing.B) {
	v := Ztype{}
	bts, _ := v.ZebraMarshalMsg(nil)
	b.ReportAllocs()
	b.SetBytes(int64(len(bts)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := v.ZebraUnmarshalMsg(bts)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestEncodeDecodeZtypeZebra(t *testing.T) {
	v := Ztype{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)

	m := v.ZebraMsgsize()
	if buf.Len() > m {
		t.Logf("WARNING: ZebraMsgsize() for %v is inaccurate", v)
	}

	vn := Ztype{}
	err := msgp.Decode(&buf, &vn)
	if err != nil {
		t.Error(err)
	}

	buf.Reset()
	msgp.Encode(&buf, &v)
	err = msgp.NewReader(&buf).Skip()
	if err != nil {
		t.Error(err)
	}
}

func BenchmarkEncodeZtypeZebra(b *testing.B) {
	v := Ztype{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	en := msgp.NewWriter(msgp.Nowhere)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.ZebraEncodeMsg(en)
	}
	en.Flush()
}

func BenchmarkDecodeZtypeZebra(b *testing.B) {
	v := Ztype{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	rd := msgp.NewEndlessReader(buf.Bytes(), b)
	dc := msgp.NewReader(rd)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		err := v.ZebraDecodeMsg(dc)
		if err != nil {
			b.Fatal(err)
		}
	}
}
