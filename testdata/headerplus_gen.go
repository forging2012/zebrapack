// Code generated by ZEBRAPACK (github.com/glycerine/zebrapack). DO NOT EDIT.

package testdata

import (
	"github.com/glycerine/zebrapack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Dog) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_7e8e61bb5d07e348_1 = 1

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields0zgensym_7e8e61bb5d07e348_1 uint32
	totalEncodedFields0zgensym_7e8e61bb5d07e348_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_7e8e61bb5d07e348_1 := totalEncodedFields0zgensym_7e8e61bb5d07e348_1
	missingFieldsLeft0zgensym_7e8e61bb5d07e348_1 := maxFields0zgensym_7e8e61bb5d07e348_1 - totalEncodedFields0zgensym_7e8e61bb5d07e348_1

	var nextMiss0zgensym_7e8e61bb5d07e348_1 int = -1
	var found0zgensym_7e8e61bb5d07e348_1 [maxFields0zgensym_7e8e61bb5d07e348_1]bool
	var curField0zgensym_7e8e61bb5d07e348_1 int

doneWithStruct0zgensym_7e8e61bb5d07e348_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_7e8e61bb5d07e348_1 > 0 || missingFieldsLeft0zgensym_7e8e61bb5d07e348_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_7e8e61bb5d07e348_1, missingFieldsLeft0zgensym_7e8e61bb5d07e348_1, msgp.ShowFound(found0zgensym_7e8e61bb5d07e348_1[:]), decodeMsgFieldOrder0zgensym_7e8e61bb5d07e348_1)
		if encodedFieldsLeft0zgensym_7e8e61bb5d07e348_1 > 0 {
			encodedFieldsLeft0zgensym_7e8e61bb5d07e348_1--
			curField0zgensym_7e8e61bb5d07e348_1, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss0zgensym_7e8e61bb5d07e348_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_7e8e61bb5d07e348_1 = 0
			}
			for nextMiss0zgensym_7e8e61bb5d07e348_1 < maxFields0zgensym_7e8e61bb5d07e348_1 && (found0zgensym_7e8e61bb5d07e348_1[nextMiss0zgensym_7e8e61bb5d07e348_1] || decodeMsgFieldSkip0zgensym_7e8e61bb5d07e348_1[nextMiss0zgensym_7e8e61bb5d07e348_1]) {
				nextMiss0zgensym_7e8e61bb5d07e348_1++
			}
			if nextMiss0zgensym_7e8e61bb5d07e348_1 == maxFields0zgensym_7e8e61bb5d07e348_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_7e8e61bb5d07e348_1
			}
			missingFieldsLeft0zgensym_7e8e61bb5d07e348_1--
			curField0zgensym_7e8e61bb5d07e348_1 = nextMiss0zgensym_7e8e61bb5d07e348_1
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_7e8e61bb5d07e348_1)
		switch curField0zgensym_7e8e61bb5d07e348_1 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "Nm"
			found0zgensym_7e8e61bb5d07e348_1[0] = true
			z.Nm, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_7e8e61bb5d07e348_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Dog
var decodeMsgFieldOrder0zgensym_7e8e61bb5d07e348_1 = []string{"Nm"}

var decodeMsgFieldSkip0zgensym_7e8e61bb5d07e348_1 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z Dog) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Nm) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z Dog) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_7e8e61bb5d07e348_2 [1]bool
	fieldsInUse_zgensym_7e8e61bb5d07e348_3 := z.fieldsNotEmpty(empty_zgensym_7e8e61bb5d07e348_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_7e8e61bb5d07e348_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Dog'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x44, 0x6f, 0x67})
	if err != nil {
		return err
	}

	if !empty_zgensym_7e8e61bb5d07e348_2[0] {
		// zid 0 for "Nm"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Nm)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z Dog) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'Dog'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x44, 0x6f, 0x67})

	if !empty[0] {
		// zid 0 for "Nm"
		o = append(o, 0x0)
		o = msgp.AppendString(o, z.Nm)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Dog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Dog) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_7e8e61bb5d07e348_5 = 1

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields4zgensym_7e8e61bb5d07e348_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_7e8e61bb5d07e348_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_7e8e61bb5d07e348_5 := totalEncodedFields4zgensym_7e8e61bb5d07e348_5
	missingFieldsLeft4zgensym_7e8e61bb5d07e348_5 := maxFields4zgensym_7e8e61bb5d07e348_5 - totalEncodedFields4zgensym_7e8e61bb5d07e348_5

	var nextMiss4zgensym_7e8e61bb5d07e348_5 int = -1
	var found4zgensym_7e8e61bb5d07e348_5 [maxFields4zgensym_7e8e61bb5d07e348_5]bool
	var curField4zgensym_7e8e61bb5d07e348_5 int

doneWithStruct4zgensym_7e8e61bb5d07e348_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_7e8e61bb5d07e348_5 > 0 || missingFieldsLeft4zgensym_7e8e61bb5d07e348_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_7e8e61bb5d07e348_5, missingFieldsLeft4zgensym_7e8e61bb5d07e348_5, msgp.ShowFound(found4zgensym_7e8e61bb5d07e348_5[:]), unmarshalMsgFieldOrder4zgensym_7e8e61bb5d07e348_5)
		if encodedFieldsLeft4zgensym_7e8e61bb5d07e348_5 > 0 {
			encodedFieldsLeft4zgensym_7e8e61bb5d07e348_5--
			curField4zgensym_7e8e61bb5d07e348_5, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss4zgensym_7e8e61bb5d07e348_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_7e8e61bb5d07e348_5 = 0
			}
			for nextMiss4zgensym_7e8e61bb5d07e348_5 < maxFields4zgensym_7e8e61bb5d07e348_5 && (found4zgensym_7e8e61bb5d07e348_5[nextMiss4zgensym_7e8e61bb5d07e348_5] || unmarshalMsgFieldSkip4zgensym_7e8e61bb5d07e348_5[nextMiss4zgensym_7e8e61bb5d07e348_5]) {
				nextMiss4zgensym_7e8e61bb5d07e348_5++
			}
			if nextMiss4zgensym_7e8e61bb5d07e348_5 == maxFields4zgensym_7e8e61bb5d07e348_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_7e8e61bb5d07e348_5
			}
			missingFieldsLeft4zgensym_7e8e61bb5d07e348_5--
			curField4zgensym_7e8e61bb5d07e348_5 = nextMiss4zgensym_7e8e61bb5d07e348_5
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_7e8e61bb5d07e348_5)
		switch curField4zgensym_7e8e61bb5d07e348_5 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "Nm"
			found4zgensym_7e8e61bb5d07e348_5[0] = true
			z.Nm, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_7e8e61bb5d07e348_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Dog
var unmarshalMsgFieldOrder4zgensym_7e8e61bb5d07e348_5 = []string{"Nm"}

var unmarshalMsgFieldSkip4zgensym_7e8e61bb5d07e348_5 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Dog) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Nm)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Header) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_7e8e61bb5d07e348_7 = 3

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields6zgensym_7e8e61bb5d07e348_7 uint32
	totalEncodedFields6zgensym_7e8e61bb5d07e348_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_7e8e61bb5d07e348_7 := totalEncodedFields6zgensym_7e8e61bb5d07e348_7
	missingFieldsLeft6zgensym_7e8e61bb5d07e348_7 := maxFields6zgensym_7e8e61bb5d07e348_7 - totalEncodedFields6zgensym_7e8e61bb5d07e348_7

	var nextMiss6zgensym_7e8e61bb5d07e348_7 int = -1
	var found6zgensym_7e8e61bb5d07e348_7 [maxFields6zgensym_7e8e61bb5d07e348_7]bool
	var curField6zgensym_7e8e61bb5d07e348_7 int

doneWithStruct6zgensym_7e8e61bb5d07e348_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_7e8e61bb5d07e348_7 > 0 || missingFieldsLeft6zgensym_7e8e61bb5d07e348_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_7e8e61bb5d07e348_7, missingFieldsLeft6zgensym_7e8e61bb5d07e348_7, msgp.ShowFound(found6zgensym_7e8e61bb5d07e348_7[:]), decodeMsgFieldOrder6zgensym_7e8e61bb5d07e348_7)
		if encodedFieldsLeft6zgensym_7e8e61bb5d07e348_7 > 0 {
			encodedFieldsLeft6zgensym_7e8e61bb5d07e348_7--
			curField6zgensym_7e8e61bb5d07e348_7, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss6zgensym_7e8e61bb5d07e348_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_7e8e61bb5d07e348_7 = 0
			}
			for nextMiss6zgensym_7e8e61bb5d07e348_7 < maxFields6zgensym_7e8e61bb5d07e348_7 && (found6zgensym_7e8e61bb5d07e348_7[nextMiss6zgensym_7e8e61bb5d07e348_7] || decodeMsgFieldSkip6zgensym_7e8e61bb5d07e348_7[nextMiss6zgensym_7e8e61bb5d07e348_7]) {
				nextMiss6zgensym_7e8e61bb5d07e348_7++
			}
			if nextMiss6zgensym_7e8e61bb5d07e348_7 == maxFields6zgensym_7e8e61bb5d07e348_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_7e8e61bb5d07e348_7
			}
			missingFieldsLeft6zgensym_7e8e61bb5d07e348_7--
			curField6zgensym_7e8e61bb5d07e348_7 = nextMiss6zgensym_7e8e61bb5d07e348_7
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_7e8e61bb5d07e348_7)
		switch curField6zgensym_7e8e61bb5d07e348_7 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "S1"
			found6zgensym_7e8e61bb5d07e348_7[0] = true
			z.S1, err = dc.ReadString()
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "S2"
			found6zgensym_7e8e61bb5d07e348_7[1] = true
			z.S2, err = dc.ReadString()
			if err != nil {
				return
			}
		case 2:
			// zid 2 for "C"
			found6zgensym_7e8e61bb5d07e348_7[2] = true
			z.C, err = dc.ReadInt64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_7e8e61bb5d07e348_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Header
var decodeMsgFieldOrder6zgensym_7e8e61bb5d07e348_7 = []string{"S1", "S2", "C"}

var decodeMsgFieldSkip6zgensym_7e8e61bb5d07e348_7 = []bool{false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z Header) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 3
	}
	var fieldsInUse uint32 = 3
	isempty[0] = (len(z.S1) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.S2) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.C == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z Header) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_7e8e61bb5d07e348_8 [3]bool
	fieldsInUse_zgensym_7e8e61bb5d07e348_9 := z.fieldsNotEmpty(empty_zgensym_7e8e61bb5d07e348_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_7e8e61bb5d07e348_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Header'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x48, 0x65, 0x61, 0x64, 0x65, 0x72})
	if err != nil {
		return err
	}

	if !empty_zgensym_7e8e61bb5d07e348_8[0] {
		// zid 0 for "S1"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteString(z.S1)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_7e8e61bb5d07e348_8[1] {
		// zid 1 for "S2"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteString(z.S2)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_7e8e61bb5d07e348_8[2] {
		// zid 2 for "C"
		err = en.Append(0x2)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.C)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z Header) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [3]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'Header'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x48, 0x65, 0x61, 0x64, 0x65, 0x72})

	if !empty[0] {
		// zid 0 for "S1"
		o = append(o, 0x0)
		o = msgp.AppendString(o, z.S1)
	}

	if !empty[1] {
		// zid 1 for "S2"
		o = append(o, 0x1)
		o = msgp.AppendString(o, z.S2)
	}

	if !empty[2] {
		// zid 2 for "C"
		o = append(o, 0x2)
		o = msgp.AppendInt64(o, z.C)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Header) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Header) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_7e8e61bb5d07e348_11 = 3

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields10zgensym_7e8e61bb5d07e348_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_7e8e61bb5d07e348_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_7e8e61bb5d07e348_11 := totalEncodedFields10zgensym_7e8e61bb5d07e348_11
	missingFieldsLeft10zgensym_7e8e61bb5d07e348_11 := maxFields10zgensym_7e8e61bb5d07e348_11 - totalEncodedFields10zgensym_7e8e61bb5d07e348_11

	var nextMiss10zgensym_7e8e61bb5d07e348_11 int = -1
	var found10zgensym_7e8e61bb5d07e348_11 [maxFields10zgensym_7e8e61bb5d07e348_11]bool
	var curField10zgensym_7e8e61bb5d07e348_11 int

doneWithStruct10zgensym_7e8e61bb5d07e348_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_7e8e61bb5d07e348_11 > 0 || missingFieldsLeft10zgensym_7e8e61bb5d07e348_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_7e8e61bb5d07e348_11, missingFieldsLeft10zgensym_7e8e61bb5d07e348_11, msgp.ShowFound(found10zgensym_7e8e61bb5d07e348_11[:]), unmarshalMsgFieldOrder10zgensym_7e8e61bb5d07e348_11)
		if encodedFieldsLeft10zgensym_7e8e61bb5d07e348_11 > 0 {
			encodedFieldsLeft10zgensym_7e8e61bb5d07e348_11--
			curField10zgensym_7e8e61bb5d07e348_11, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss10zgensym_7e8e61bb5d07e348_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_7e8e61bb5d07e348_11 = 0
			}
			for nextMiss10zgensym_7e8e61bb5d07e348_11 < maxFields10zgensym_7e8e61bb5d07e348_11 && (found10zgensym_7e8e61bb5d07e348_11[nextMiss10zgensym_7e8e61bb5d07e348_11] || unmarshalMsgFieldSkip10zgensym_7e8e61bb5d07e348_11[nextMiss10zgensym_7e8e61bb5d07e348_11]) {
				nextMiss10zgensym_7e8e61bb5d07e348_11++
			}
			if nextMiss10zgensym_7e8e61bb5d07e348_11 == maxFields10zgensym_7e8e61bb5d07e348_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_7e8e61bb5d07e348_11
			}
			missingFieldsLeft10zgensym_7e8e61bb5d07e348_11--
			curField10zgensym_7e8e61bb5d07e348_11 = nextMiss10zgensym_7e8e61bb5d07e348_11
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_7e8e61bb5d07e348_11)
		switch curField10zgensym_7e8e61bb5d07e348_11 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "S1"
			found10zgensym_7e8e61bb5d07e348_11[0] = true
			z.S1, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "S2"
			found10zgensym_7e8e61bb5d07e348_11[1] = true
			z.S2, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "C"
			found10zgensym_7e8e61bb5d07e348_11[2] = true
			z.C, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_7e8e61bb5d07e348_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Header
var unmarshalMsgFieldOrder10zgensym_7e8e61bb5d07e348_11 = []string{"S1", "S2", "C"}

var unmarshalMsgFieldSkip10zgensym_7e8e61bb5d07e348_11 = []bool{false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Header) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.S1) + 9 + msgp.StringPrefixSize + len(z.S2) + 9 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Owl) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields12zgensym_7e8e61bb5d07e348_13 = 1

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields12zgensym_7e8e61bb5d07e348_13 uint32
	totalEncodedFields12zgensym_7e8e61bb5d07e348_13, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft12zgensym_7e8e61bb5d07e348_13 := totalEncodedFields12zgensym_7e8e61bb5d07e348_13
	missingFieldsLeft12zgensym_7e8e61bb5d07e348_13 := maxFields12zgensym_7e8e61bb5d07e348_13 - totalEncodedFields12zgensym_7e8e61bb5d07e348_13

	var nextMiss12zgensym_7e8e61bb5d07e348_13 int = -1
	var found12zgensym_7e8e61bb5d07e348_13 [maxFields12zgensym_7e8e61bb5d07e348_13]bool
	var curField12zgensym_7e8e61bb5d07e348_13 int

doneWithStruct12zgensym_7e8e61bb5d07e348_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_7e8e61bb5d07e348_13 > 0 || missingFieldsLeft12zgensym_7e8e61bb5d07e348_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_7e8e61bb5d07e348_13, missingFieldsLeft12zgensym_7e8e61bb5d07e348_13, msgp.ShowFound(found12zgensym_7e8e61bb5d07e348_13[:]), decodeMsgFieldOrder12zgensym_7e8e61bb5d07e348_13)
		if encodedFieldsLeft12zgensym_7e8e61bb5d07e348_13 > 0 {
			encodedFieldsLeft12zgensym_7e8e61bb5d07e348_13--
			curField12zgensym_7e8e61bb5d07e348_13, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss12zgensym_7e8e61bb5d07e348_13 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss12zgensym_7e8e61bb5d07e348_13 = 0
			}
			for nextMiss12zgensym_7e8e61bb5d07e348_13 < maxFields12zgensym_7e8e61bb5d07e348_13 && (found12zgensym_7e8e61bb5d07e348_13[nextMiss12zgensym_7e8e61bb5d07e348_13] || decodeMsgFieldSkip12zgensym_7e8e61bb5d07e348_13[nextMiss12zgensym_7e8e61bb5d07e348_13]) {
				nextMiss12zgensym_7e8e61bb5d07e348_13++
			}
			if nextMiss12zgensym_7e8e61bb5d07e348_13 == maxFields12zgensym_7e8e61bb5d07e348_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_7e8e61bb5d07e348_13
			}
			missingFieldsLeft12zgensym_7e8e61bb5d07e348_13--
			curField12zgensym_7e8e61bb5d07e348_13 = nextMiss12zgensym_7e8e61bb5d07e348_13
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_7e8e61bb5d07e348_13)
		switch curField12zgensym_7e8e61bb5d07e348_13 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "Nm"
			found12zgensym_7e8e61bb5d07e348_13[0] = true
			z.Nm, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_7e8e61bb5d07e348_13 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Owl
var decodeMsgFieldOrder12zgensym_7e8e61bb5d07e348_13 = []string{"Nm"}

var decodeMsgFieldSkip12zgensym_7e8e61bb5d07e348_13 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z Owl) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Nm) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z Owl) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_7e8e61bb5d07e348_14 [1]bool
	fieldsInUse_zgensym_7e8e61bb5d07e348_15 := z.fieldsNotEmpty(empty_zgensym_7e8e61bb5d07e348_14[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_7e8e61bb5d07e348_15 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Owl'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4f, 0x77, 0x6c})
	if err != nil {
		return err
	}

	if !empty_zgensym_7e8e61bb5d07e348_14[0] {
		// zid 0 for "Nm"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Nm)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z Owl) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'Owl'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x4f, 0x77, 0x6c})

	if !empty[0] {
		// zid 0 for "Nm"
		o = append(o, 0x0)
		o = msgp.AppendString(o, z.Nm)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Owl) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Owl) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_7e8e61bb5d07e348_17 = 1

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields16zgensym_7e8e61bb5d07e348_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_7e8e61bb5d07e348_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_7e8e61bb5d07e348_17 := totalEncodedFields16zgensym_7e8e61bb5d07e348_17
	missingFieldsLeft16zgensym_7e8e61bb5d07e348_17 := maxFields16zgensym_7e8e61bb5d07e348_17 - totalEncodedFields16zgensym_7e8e61bb5d07e348_17

	var nextMiss16zgensym_7e8e61bb5d07e348_17 int = -1
	var found16zgensym_7e8e61bb5d07e348_17 [maxFields16zgensym_7e8e61bb5d07e348_17]bool
	var curField16zgensym_7e8e61bb5d07e348_17 int

doneWithStruct16zgensym_7e8e61bb5d07e348_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_7e8e61bb5d07e348_17 > 0 || missingFieldsLeft16zgensym_7e8e61bb5d07e348_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_7e8e61bb5d07e348_17, missingFieldsLeft16zgensym_7e8e61bb5d07e348_17, msgp.ShowFound(found16zgensym_7e8e61bb5d07e348_17[:]), unmarshalMsgFieldOrder16zgensym_7e8e61bb5d07e348_17)
		if encodedFieldsLeft16zgensym_7e8e61bb5d07e348_17 > 0 {
			encodedFieldsLeft16zgensym_7e8e61bb5d07e348_17--
			curField16zgensym_7e8e61bb5d07e348_17, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss16zgensym_7e8e61bb5d07e348_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_7e8e61bb5d07e348_17 = 0
			}
			for nextMiss16zgensym_7e8e61bb5d07e348_17 < maxFields16zgensym_7e8e61bb5d07e348_17 && (found16zgensym_7e8e61bb5d07e348_17[nextMiss16zgensym_7e8e61bb5d07e348_17] || unmarshalMsgFieldSkip16zgensym_7e8e61bb5d07e348_17[nextMiss16zgensym_7e8e61bb5d07e348_17]) {
				nextMiss16zgensym_7e8e61bb5d07e348_17++
			}
			if nextMiss16zgensym_7e8e61bb5d07e348_17 == maxFields16zgensym_7e8e61bb5d07e348_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_7e8e61bb5d07e348_17
			}
			missingFieldsLeft16zgensym_7e8e61bb5d07e348_17--
			curField16zgensym_7e8e61bb5d07e348_17 = nextMiss16zgensym_7e8e61bb5d07e348_17
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_7e8e61bb5d07e348_17)
		switch curField16zgensym_7e8e61bb5d07e348_17 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "Nm"
			found16zgensym_7e8e61bb5d07e348_17[0] = true
			z.Nm, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_7e8e61bb5d07e348_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Owl
var unmarshalMsgFieldOrder16zgensym_7e8e61bb5d07e348_17 = []string{"Nm"}

var unmarshalMsgFieldSkip16zgensym_7e8e61bb5d07e348_17 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Owl) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Nm)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Plus) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields18zgensym_7e8e61bb5d07e348_19 = 5

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields18zgensym_7e8e61bb5d07e348_19 uint32
	totalEncodedFields18zgensym_7e8e61bb5d07e348_19, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft18zgensym_7e8e61bb5d07e348_19 := totalEncodedFields18zgensym_7e8e61bb5d07e348_19
	missingFieldsLeft18zgensym_7e8e61bb5d07e348_19 := maxFields18zgensym_7e8e61bb5d07e348_19 - totalEncodedFields18zgensym_7e8e61bb5d07e348_19

	var nextMiss18zgensym_7e8e61bb5d07e348_19 int = -1
	var found18zgensym_7e8e61bb5d07e348_19 [maxFields18zgensym_7e8e61bb5d07e348_19]bool
	var curField18zgensym_7e8e61bb5d07e348_19 int

doneWithStruct18zgensym_7e8e61bb5d07e348_19:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft18zgensym_7e8e61bb5d07e348_19 > 0 || missingFieldsLeft18zgensym_7e8e61bb5d07e348_19 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft18zgensym_7e8e61bb5d07e348_19, missingFieldsLeft18zgensym_7e8e61bb5d07e348_19, msgp.ShowFound(found18zgensym_7e8e61bb5d07e348_19[:]), decodeMsgFieldOrder18zgensym_7e8e61bb5d07e348_19)
		if encodedFieldsLeft18zgensym_7e8e61bb5d07e348_19 > 0 {
			encodedFieldsLeft18zgensym_7e8e61bb5d07e348_19--
			curField18zgensym_7e8e61bb5d07e348_19, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss18zgensym_7e8e61bb5d07e348_19 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss18zgensym_7e8e61bb5d07e348_19 = 0
			}
			for nextMiss18zgensym_7e8e61bb5d07e348_19 < maxFields18zgensym_7e8e61bb5d07e348_19 && (found18zgensym_7e8e61bb5d07e348_19[nextMiss18zgensym_7e8e61bb5d07e348_19] || decodeMsgFieldSkip18zgensym_7e8e61bb5d07e348_19[nextMiss18zgensym_7e8e61bb5d07e348_19]) {
				nextMiss18zgensym_7e8e61bb5d07e348_19++
			}
			if nextMiss18zgensym_7e8e61bb5d07e348_19 == maxFields18zgensym_7e8e61bb5d07e348_19 {
				// filled all the empty fields!
				break doneWithStruct18zgensym_7e8e61bb5d07e348_19
			}
			missingFieldsLeft18zgensym_7e8e61bb5d07e348_19--
			curField18zgensym_7e8e61bb5d07e348_19 = nextMiss18zgensym_7e8e61bb5d07e348_19
		}
		//fmt.Printf("switching on curField: '%v'\n", curField18zgensym_7e8e61bb5d07e348_19)
		switch curField18zgensym_7e8e61bb5d07e348_19 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "Tm"
			found18zgensym_7e8e61bb5d07e348_19[0] = true
			z.Tm, err = dc.ReadTime()
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "N"
			found18zgensym_7e8e61bb5d07e348_19[1] = true
			z.N, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case 2:
			// zid 2 for "S"
			found18zgensym_7e8e61bb5d07e348_19[2] = true
			z.S, err = dc.ReadString()
			if err != nil {
				return
			}
		case 3:
			// zid 3 for "F"
			found18zgensym_7e8e61bb5d07e348_19[3] = true
			z.F, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		case 4:
			// zid 4 for "Pet"
			found18zgensym_7e8e61bb5d07e348_19[4] = true
			conc_zgensym_7e8e61bb5d07e348_21 := dc.NextStructName()
			if conc_zgensym_7e8e61bb5d07e348_21 != "" {
				if cfac_zgensym_7e8e61bb5d07e348_22, cfacOK_zgensym_7e8e61bb5d07e348_22 := interface{}(z).(msgp.ConcreteFactory); cfacOK_zgensym_7e8e61bb5d07e348_22 {
					targ_zgensym_7e8e61bb5d07e348_20 := cfac_zgensym_7e8e61bb5d07e348_22.NewValueAsInterface(conc_zgensym_7e8e61bb5d07e348_21).(Familiar)
					err = targ_zgensym_7e8e61bb5d07e348_20.DecodeMsg(dc)
					if err != nil {
						return
					}
					z.Pet = targ_zgensym_7e8e61bb5d07e348_20
					continue
				}
			}
			if z.Pet != nil {
				err = z.Pet.DecodeMsg(dc)
			}

			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss18zgensym_7e8e61bb5d07e348_19 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Plus
var decodeMsgFieldOrder18zgensym_7e8e61bb5d07e348_19 = []string{"Tm", "N", "S", "F", "Pet"}

var decodeMsgFieldSkip18zgensym_7e8e61bb5d07e348_19 = []bool{false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Plus) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (z.Tm.IsZero()) // time.Time, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.N == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.S) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.F == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Pet == nil) // interface, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Plus) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_7e8e61bb5d07e348_23 [5]bool
	fieldsInUse_zgensym_7e8e61bb5d07e348_24 := z.fieldsNotEmpty(empty_zgensym_7e8e61bb5d07e348_23[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_7e8e61bb5d07e348_24 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Plus'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x6c, 0x75, 0x73})
	if err != nil {
		return err
	}

	if !empty_zgensym_7e8e61bb5d07e348_23[0] {
		// zid 0 for "Tm"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.Tm)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_7e8e61bb5d07e348_23[1] {
		// zid 1 for "N"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.N)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_7e8e61bb5d07e348_23[2] {
		// zid 2 for "S"
		err = en.Append(0x2)
		if err != nil {
			return err
		}
		err = en.WriteString(z.S)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_7e8e61bb5d07e348_23[3] {
		// zid 3 for "F"
		err = en.Append(0x3)
		if err != nil {
			return err
		}
		err = en.WriteFloat64(z.F)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_7e8e61bb5d07e348_23[4] {
		// zid 4 for "Pet"
		err = en.Append(0x4)
		if err != nil {
			return err
		}
		err = z.Pet.EncodeMsg(en)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Plus) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'Plus'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x50, 0x6c, 0x75, 0x73})

	if !empty[0] {
		// zid 0 for "Tm"
		o = append(o, 0x0)
		o = msgp.AppendTime(o, z.Tm)
	}

	if !empty[1] {
		// zid 1 for "N"
		o = append(o, 0x1)
		o = msgp.AppendInt64(o, z.N)
	}

	if !empty[2] {
		// zid 2 for "S"
		o = append(o, 0x2)
		o = msgp.AppendString(o, z.S)
	}

	if !empty[3] {
		// zid 3 for "F"
		o = append(o, 0x3)
		o = msgp.AppendFloat64(o, z.F)
	}

	if !empty[4] {
		// zid 4 for "Pet"
		o = append(o, 0x4)
		o, err = msgp.AppendIntf(o, z.Pet) // is.iface, gen/marshal.go:259, b='&gen.BaseElem{Common:gen.Common{vname:"z.Pet", alias:"Familiar", hmp:gen.HasMethodPrefix(nil), Skip:false}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:true, isInIfaceSlice:false}'
		if err != nil {
			return
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Plus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Plus) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields25zgensym_7e8e61bb5d07e348_26 = 5

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields25zgensym_7e8e61bb5d07e348_26 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields25zgensym_7e8e61bb5d07e348_26, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft25zgensym_7e8e61bb5d07e348_26 := totalEncodedFields25zgensym_7e8e61bb5d07e348_26
	missingFieldsLeft25zgensym_7e8e61bb5d07e348_26 := maxFields25zgensym_7e8e61bb5d07e348_26 - totalEncodedFields25zgensym_7e8e61bb5d07e348_26

	var nextMiss25zgensym_7e8e61bb5d07e348_26 int = -1
	var found25zgensym_7e8e61bb5d07e348_26 [maxFields25zgensym_7e8e61bb5d07e348_26]bool
	var curField25zgensym_7e8e61bb5d07e348_26 int

doneWithStruct25zgensym_7e8e61bb5d07e348_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_7e8e61bb5d07e348_26 > 0 || missingFieldsLeft25zgensym_7e8e61bb5d07e348_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_7e8e61bb5d07e348_26, missingFieldsLeft25zgensym_7e8e61bb5d07e348_26, msgp.ShowFound(found25zgensym_7e8e61bb5d07e348_26[:]), unmarshalMsgFieldOrder25zgensym_7e8e61bb5d07e348_26)
		if encodedFieldsLeft25zgensym_7e8e61bb5d07e348_26 > 0 {
			encodedFieldsLeft25zgensym_7e8e61bb5d07e348_26--
			curField25zgensym_7e8e61bb5d07e348_26, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss25zgensym_7e8e61bb5d07e348_26 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss25zgensym_7e8e61bb5d07e348_26 = 0
			}
			for nextMiss25zgensym_7e8e61bb5d07e348_26 < maxFields25zgensym_7e8e61bb5d07e348_26 && (found25zgensym_7e8e61bb5d07e348_26[nextMiss25zgensym_7e8e61bb5d07e348_26] || unmarshalMsgFieldSkip25zgensym_7e8e61bb5d07e348_26[nextMiss25zgensym_7e8e61bb5d07e348_26]) {
				nextMiss25zgensym_7e8e61bb5d07e348_26++
			}
			if nextMiss25zgensym_7e8e61bb5d07e348_26 == maxFields25zgensym_7e8e61bb5d07e348_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_7e8e61bb5d07e348_26
			}
			missingFieldsLeft25zgensym_7e8e61bb5d07e348_26--
			curField25zgensym_7e8e61bb5d07e348_26 = nextMiss25zgensym_7e8e61bb5d07e348_26
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_7e8e61bb5d07e348_26)
		switch curField25zgensym_7e8e61bb5d07e348_26 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "Tm"
			found25zgensym_7e8e61bb5d07e348_26[0] = true
			z.Tm, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "N"
			found25zgensym_7e8e61bb5d07e348_26[1] = true
			z.N, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "S"
			found25zgensym_7e8e61bb5d07e348_26[2] = true
			z.S, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 3:
			// zid 3 for "F"
			found25zgensym_7e8e61bb5d07e348_26[3] = true
			z.F, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		case 4:
			// zid 4 for "Pet"
			found25zgensym_7e8e61bb5d07e348_26[4] = true
			var conc_zgensym_7e8e61bb5d07e348_28 string
			conc_zgensym_7e8e61bb5d07e348_28, bts = nbs.NextStructName(bts)
			if conc_zgensym_7e8e61bb5d07e348_28 != "" {
				if cfac_zgensym_7e8e61bb5d07e348_29, cfacOK_zgensym_7e8e61bb5d07e348_29 := interface{}(z).(msgp.ConcreteFactory); cfacOK_zgensym_7e8e61bb5d07e348_29 {
					targ_zgensym_7e8e61bb5d07e348_27 := cfac_zgensym_7e8e61bb5d07e348_29.NewValueAsInterface(conc_zgensym_7e8e61bb5d07e348_28).(Familiar)
					bts, err = targ_zgensym_7e8e61bb5d07e348_27.UnmarshalMsg(bts)
					if err != nil {
						return
					}
					z.Pet = targ_zgensym_7e8e61bb5d07e348_27
					continue
				}
			}
			if msgp.IsNil(bts) {
				bts = bts[1:]
				continue
			}
			bts, err = z.Pet.UnmarshalMsg(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_7e8e61bb5d07e348_26 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Plus
var unmarshalMsgFieldOrder25zgensym_7e8e61bb5d07e348_26 = []string{"Tm", "N", "S", "F", "Pet"}

var unmarshalMsgFieldSkip25zgensym_7e8e61bb5d07e348_26 = []bool{false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Plus) Msgsize() (s int) {
	s = 1 + 8 + msgp.TimeSize + 8 + msgp.Int64Size + 8 + msgp.StringPrefixSize + len(z.S) + 8 + msgp.Float64Size + 8 + msgp.GuessSize(z.Pet)
	return
}

// FileHeaderplus holds ZebraPack schema from file 'headerplus.go'
type FileHeaderplus struct{}

// ZebraSchemaInMsgpack2Format provides the ZebraPack Schema in msgpack2 format, length 1436 bytes
func (FileHeaderplus) ZebraSchemaInMsgpack2Format() []byte {
	return []byte{
		0x84, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0xad, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x70,
		0x6c, 0x75, 0x73, 0x2e, 0x67, 0x6f, 0xad, 0x53, 0x6f, 0x75,
		0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
		0xa8, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0xa7,
		0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x84, 0xa3, 0x4f,
		0x77, 0x6c, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
		0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x4f, 0x77, 0x6c, 0xa6, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x73, 0x91, 0x87, 0xa3, 0x5a, 0x69,
		0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xa2, 0x4e, 0x6d, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xa2, 0x4e, 0x6d, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
		0x69, 0x76, 0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xa6, 0x48, 0x65, 0x61,
		0x64, 0x65, 0x72, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63,
		0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x48, 0x65, 0x61, 0x64,
		0x65, 0x72, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x93,
		0x87, 0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa2, 0x53,
		0x31, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xa2, 0x53, 0x31, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
		0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3,
		0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0x87, 0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa2, 0x53,
		0x32, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xa2, 0x53, 0x32, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
		0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3,
		0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0x87, 0xa3, 0x5a, 0x69, 0x64, 0x02, 0xab, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x43,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xa1, 0x43, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x69,
		0x6e, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69,
		0x74, 0x69, 0x76, 0x65, 0x11, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82,
		0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x11, 0xa3, 0x53, 0x74, 0x72,
		0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xa4, 0x50, 0x6c, 0x75,
		0x73, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e,
		0x61, 0x6d, 0x65, 0xa4, 0x50, 0x6c, 0x75, 0x73, 0xa6, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x73, 0x95, 0x87, 0xa3, 0x5a, 0x69,
		0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xa2, 0x54, 0x6d, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xa2, 0x54, 0x6d, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa9, 0x74, 0x69, 0x6d,
		0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69,
		0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x14, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x14, 0xa3, 0x53,
		0x74, 0x72, 0xa4, 0x54, 0x69, 0x6d, 0x65, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x01, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x4e, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xa1, 0x4e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36,
		0x34, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x11, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x11, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e,
		0x74, 0x36, 0x34, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x02, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xa1, 0x53, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x53, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x03, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa1,
		0x46, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x46, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa7,
		0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x04, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x04, 0xa3,
		0x53, 0x74, 0x72, 0xa7, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36,
		0x34, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x04, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa3,
		0x50, 0x65, 0x74, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x50, 0x65, 0x74,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa8, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69,
		0x61, 0x72, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x16, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xa8, 0x46,
		0x61, 0x6d, 0x69, 0x6c, 0x69, 0x61, 0x72, 0xa3, 0x44, 0x6f,
		0x67, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e,
		0x61, 0x6d, 0x65, 0xa3, 0x44, 0x6f, 0x67, 0xa6, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x73, 0x91, 0x87, 0xa3, 0x5a, 0x69, 0x64,
		0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xa2, 0x4e, 0x6d, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa2,
		0x4e, 0x6d, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69,
		0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73,
		0x74, 0x72, 0x69, 0x6e, 0x67, 0xa7, 0x49, 0x6d, 0x70, 0x6f,
		0x72, 0x74, 0x73, 0x93, 0xa5, 0x22, 0x66, 0x6d, 0x74, 0x22,
		0xa6, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x25, 0x22,
		0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
		0x2f, 0x67, 0x6c, 0x79, 0x63, 0x65, 0x72, 0x69, 0x6e, 0x65,
		0x2f, 0x7a, 0x65, 0x62, 0x72, 0x61, 0x70, 0x61, 0x63, 0x6b,
		0x2f, 0x6d, 0x73, 0x67, 0x70, 0x22,
	}
}

// ZebraSchemaInJsonCompact provides the ZebraPack Schema in compact JSON format, length 1839 bytes
func (FileHeaderplus) ZebraSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath":"headerplus.go","SourcePackage":"testdata","Structs":{"Owl":{"StructName":"Owl","Fields":[{"Zid":0,"FieldGoName":"Nm","FieldTagName":"Nm","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}}]},"Header":{"StructName":"Header","Fields":[{"Zid":0,"FieldGoName":"S1","FieldTagName":"S1","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":1,"FieldGoName":"S2","FieldTagName":"S2","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":2,"FieldGoName":"C","FieldTagName":"C","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}}]},"Plus":{"StructName":"Plus","Fields":[{"Zid":0,"FieldGoName":"Tm","FieldTagName":"Tm","FieldTypeStr":"time.Time","FieldCategory":23,"FieldPrimitive":20,"FieldFullType":{"Kind":20,"Str":"Time"}},{"Zid":1,"FieldGoName":"N","FieldTagName":"N","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}},{"Zid":2,"FieldGoName":"S","FieldTagName":"S","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":3,"FieldGoName":"F","FieldTagName":"F","FieldTypeStr":"float64","FieldCategory":23,"FieldPrimitive":4,"FieldFullType":{"Kind":4,"Str":"float64"}},{"Zid":4,"FieldGoName":"Pet","FieldTagName":"Pet","FieldTypeStr":"Familiar","FieldCategory":23,"FieldPrimitive":22,"FieldFullType":{"Kind":22,"Str":"Familiar"}}]},"Dog":{"StructName":"Dog","Fields":[{"Zid":0,"FieldGoName":"Nm","FieldTagName":"Nm","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}}]}},"Imports":["\"fmt\"","\"time\"","\"github.com/glycerine/zebrapack/msgp\""]}`)
}

// ZebraSchemaInJsonPretty provides the ZebraPack Schema in pretty JSON format, length 4751 bytes
func (FileHeaderplus) ZebraSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath": "headerplus.go",
    "SourcePackage": "testdata",
    "Structs": {
        "Owl": {
            "StructName": "Owl",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Nm",
                    "FieldTagName": "Nm",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                }
            ]
        },
        "Header": {
            "StructName": "Header",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "S1",
                    "FieldTagName": "S1",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "S2",
                    "FieldTagName": "S2",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "C",
                    "FieldTagName": "C",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                }
            ]
        },
        "Plus": {
            "StructName": "Plus",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Tm",
                    "FieldTagName": "Tm",
                    "FieldTypeStr": "time.Time",
                    "FieldCategory": 23,
                    "FieldPrimitive": 20,
                    "FieldFullType": {
                        "Kind": 20,
                        "Str": "Time"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "N",
                    "FieldTagName": "N",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "S",
                    "FieldTagName": "S",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 3,
                    "FieldGoName": "F",
                    "FieldTagName": "F",
                    "FieldTypeStr": "float64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 4,
                    "FieldFullType": {
                        "Kind": 4,
                        "Str": "float64"
                    }
                },
                {
                    "Zid": 4,
                    "FieldGoName": "Pet",
                    "FieldTagName": "Pet",
                    "FieldTypeStr": "Familiar",
                    "FieldCategory": 23,
                    "FieldPrimitive": 22,
                    "FieldFullType": {
                        "Kind": 22,
                        "Str": "Familiar"
                    }
                }
            ]
        },
        "Dog": {
            "StructName": "Dog",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Nm",
                    "FieldTagName": "Nm",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                }
            ]
        }
    },
    "Imports": [
        "\"fmt\"",
        "\"time\"",
        "\"github.com/glycerine/zebrapack/msgp\""
    ]
}`)
}
